library(quantmod)
library(gridExtra)
setwd("../")
home = getwd()
home
utils = paste(home, "/utils", sep="")
plot_dir = paste(home, "/plots", sep="")
dat_cur = paste(home, "/popularity_export", sep="")
dat_cur1 = "/mnt/WanChai/Dropbox/AlgoTrading/Robinhood/popularity_export"
dat_lastwk = "/mnt/WanChai/Dropbox/AlgoTrading/Robinhood/popularity_export_LASTWK"
load(paste(home1, "/Robintrack_Jun27.RData", sep=""))
home1 = "/mnt/WanChai/Dropbox/AlgoTrading/Robinhood"
load(paste(home1, "/Robintrack_Jun27.RData", sep=""))
ll.old = ll
rm(data_env)
# NOTE : call fun.R *after* reading in the old data, never before !
source(paste(utils, "/Fun.R", sep=""))
# Get all CSV file names
nm = list.files(path=dat_cur1, all.files=FALSE, include.dirs=FALSE)
nm = nm[3:length(nm)]
(N = length(nm))
# 8508
# Build vector of ticker symbols
tkr = sapply(strsplit(x=nm, split="\\."), parse_ticker)
# Check for issues
sum(is.na(tkr)) # expect 0
# Read CSV files, convert them to xts objects, save them to the data_env environment
setwd(dat_cur1)
data_env = new.env()
Len = sapply(nm, read_convert_save2env, data_env=data_env)
# Check : # tickers match # of time series
length(ls(envir=data_env)) == length(nm) # expect TRUE
home
setwd(home)
# Aggregate the hourly data to daily and weekly and put them in a list
ll = sweep_env(data_env, day_wk_aggregator)
# Check + statistics on each ticker dataset
cnt = table(sapply(ll, function(.s) nrow(.s[["y_daily"]])))
sum(cnt[which(as.integer(names(cnt)) > 365)]) / len(tkr)
sum(cnt[which(as.integer(names(cnt)) > 365)]) / length(tkr)
cnt = table(sapply(ll, function(.s) nrow(.s[["y_wk"]])))
sum(cnt[which(as.integer(names(cnt)) > 52)]) / length(tkr)
library(goodies)
len(ls(envir=data_env))
# 2. Top holdings
df = as.data.frame(t(sapply(ll, latest_stat, "2020-03-20")))
df[,"tkr"] = as.character(df[,"tkr"])
df[,"base_holding"] = as.numeric(df[,"base_holding"])
df[,"cur_holding"] = as.numeric(df[,"cur_holding"])
df[,"pct_change"] = 100*(df[,"cur_holding"] / df[,"base_holding"] - 1)
df = df[order(df[,"cur_holding"], decreasing = TRUE),]
top_nm = head(df, 10)[,"tkr"]
tmp = head(df, 10)
tmp
colnames(tmp) = c("Ticker", "Mar 20th", "This Week", "% Change")
tmp[,2] = format(tmp[,2], big.mark=",", digits=0, scientific=FALSE)
tmp[,3] = format(tmp[,3], big.mark=",", digits=0, scientific=FALSE)
tmp[,4] = format(tmp[,4], big.mark=",", digits=2, scientific=FALSE)
png("Top10_table.png", width=300, height=300, bg="white")
grid.table(tmp, rows=NULL)
dev.off()
# 3. stocks with more than 100k accounts
df[which(df[,"cur_holding"] > 100000), "tkr"]
# 4. largest percentage increase since Mar 20
df1 = head(df, 100)
df1 = df1[order(df1[,"pct_change"], decreasing=TRUE),]
incr_nm = head(df1, 10)[,"tkr"]
head(df1, 10)
# for github display
tmp = head(df1, 10)
colnames(tmp) = c("Ticker", "Mar 20th", "This Week", "% Change")
tmp[,2] = format(tmp[,2], big.mark=",", digits=0, scientific=FALSE)
tmp[,3] = format(tmp[,3], big.mark=",", digits=0, scientific=FALSE)
tmp[,4] = format(tmp[,4], big.mark=",", digits=2, scientific=FALSE)
png("LargestIncr.png", width=480, height = 480, bg="white")
grid.table(tmp, rows=NULL)
dev.off()
# 4.1 largest percentage decrease since Mar 20
df2 = df[which(df[,"pct_change"] < 0 & df[,"base_holding"] > 10000),]
dim(df2)
df2 = df2[order(df2[,"pct_change"], decreasing =FALSE),]
decr_nm = head(df2, 10)[,"tkr"]
# for github display
tmp = head(df2, 10)
tmp
len(ll.old)
# 7. biggest change since last week
df.old = as.data.frame(t(sapply(ll.old, latest_stat, "2020-03-20")))
df.old[,"tkr"] = as.character(df.old[,"tkr"])
df.old[,"base_holding"] = as.numeric(df.old[,"base_holding"])
df.old[,"cur_holding"] = as.numeric(df.old[,"cur_holding"])
df.old = df.old[order(df.old[,"cur_holding"], decreasing = TRUE),]
df.comb = merge(df[,1:3], df.old[,1:3], by="tkr", all.x=FALSE, all.y=TRUE, suffixes=c(".cur", ".lastwk"))
df.comb[,"delta"] = df.comb[,"cur_holding.cur"] - df.comb[,"cur_holding.lastwk"]
df.comb[,"delta.pct"] = ifelse( df.comb[,"cur_holding.lastwk"] > 0, 100*df.comb[,"delta"] / df.comb[,"cur_holding.lastwk"], NA)
tmp = df.comb[which(df.comb[,"cur_holding.lastwk"] > 100000),]
tmp = tmp[order(tmp[,"delta.pct"], decreasing=TRUE),]
tmp = tmp[,c("tkr", "cur_holding.cur", "cur_holding.lastwk", "delta", "delta.pct")]
incr = head(tmp, 10)
decr = tail(tmp, 10)
incr
decr
colnames(incr) = c("Ticker", "Current", "Last Week", "Net Change", "% Change")
incr[,2] = format(incr[,2], big.mark=",", digits=0, scientific=FALSE)
incr[,3] = format(incr[,3], big.mark=",", digits=0, scientific=FALSE)
incr[,4] = format(incr[,4], big.mark=",", digits=0, scientific=FALSE)
incr[,5] = format(incr[,5], big.mark=",", digits=3, scientific=FALSE)
colnames(decr) = c("Ticker", "Current", "Last Week", "Net Change", "% Change")
decr[,2] = format(decr[,2], big.mark=",", digits=0, scientific=FALSE)
decr[,3] = format(decr[,3], big.mark=",", digits=0, scientific=FALSE)
decr[,4] = format(decr[,4], big.mark=",", digits=0, scientific=FALSE)
decr[,5] = format(decr[,5], big.mark=",", digits=3, scientific=FALSE)
png("Incr_since_lastwk.png", width=400, height=300, bg="white")
grid.table(incr, rows=NULL)
dev.off()
png("Decr_since_lastwk.png", width=400, height=300, bg="white")
grid.table(decr, rows=NULL)
dev.off()
df.old[which(df.old[,"cur_holding"] > 100000), "tkr"]
a1 = df.old[which(df.old[,"cur_holding"] > 100000), "tkr"]
a = df[which(df[,"cur_holding"] > 100000), "tkr"]
a
a1
which(!a %in% a1)
a[which(!a %in% a1)]
ls()
save.image("Robintrack_Jul5.RData")
